{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api/users.js","App.jsx","api/todos.js","index.js"],"names":["request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","TodoList","state","query","selectedTodos","handleQueryChange","event","setState","target","value","toLowerCase","handleSelectedChange","todosSelector","todos","filter","todo","completed","this","props","onUserIdSelected","selectedUserId","visibleTodos","title","includes","className","type","placeholder","onChange","map","id","userId","key","classNames","checked","readOnly","onClick","button","React","Component","CurrentUser","user","loadUser","prevProps","userClear","name","email","phone","App","userIdSelect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c587fc54.chunk.js","sourcesContent":["// eslint-disable-next-line\nconst BASE_URL = `https://mate-api.herokuapp.com`;\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedTodos: 'all',\n  }\n\n  handleQueryChange = (event) => {\n    this.setState({ query: event.target.value.toLowerCase() });\n  }\n\n  handleSelectedChange = (event) => {\n    this.setState({ selectedTodos: event.target.value });\n  }\n\n  todosSelector = (todos) => {\n    const { selectedTodos } = this.state;\n\n    switch (selectedTodos) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  };\n\n  render() {\n    const { todos, onUserIdSelected, selectedUserId } = this.props;\n    const { query } = this.state;\n\n    const workingTodos = this.todosSelector([...todos]);\n\n    // eslint-disable-next-line array-callback-return,consistent-return\n    const visibleTodos = workingTodos.filter(({ title }) => {\n      if (title) {\n        return title.toLowerCase().includes(query);\n      }\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        {'Search: '}\n        <input\n          type=\"text\"\n          placeholder=\"Enter a title\"\n          onChange={this.handleQueryChange}\n        />\n\n        <select\n          onChange={this.handleSelectedChange}\n        >\n          <option>Choose todos</option>\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(({ id, title, userId, completed }) => (\n              <li\n                key={id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': completed,\n                  'TodoList__item--unchecked': !completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={completed}\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                {userId && (\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      onUserIdSelected(userId);\n                    }}\n                    className={classNames({\n                      'TodoList__user-button': true,\n                      button: true,\n                      'TodoList__user-button--selected':\n                        selectedUserId === userId,\n                    })}\n                  >\n                    {`User #${userId}`}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({}),\n  ).isRequired,\n\n  onUserIdSelected: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React from 'react';\n\nimport './CurrentUser.scss';\n\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/users';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId === prevProps.userId) {\n      return;\n    }\n\n    this.loadUser();\n  }\n\n  loadUser() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userClear, userId } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${userId}`}</span>\n        </h2>\n\n        {!user ? (\n          <p>Loading...</p>\n        ) : (\n          <>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </>\n        )}\n\n        <button\n          onClick={userClear}\n          type=\"button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userClear: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  userIdSelect = (userId) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  }\n\n  userClear = () => this.setState({ selectedUserId: 0 });\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserIdSelected={this.userIdSelect}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                userClear={this.userClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { request } from './api';\n\nexport const getTodos = () => request('/todos');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
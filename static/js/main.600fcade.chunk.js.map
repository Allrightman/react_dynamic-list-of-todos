{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","selectedTodos","handleQueryChange","event","setState","target","value","toLowerCase","handleSelectedChange","todosSelector","todos","filter","todo","completed","this","props","userSelect","selectedUserId","visibleTodos","title","includes","className","type","placeholder","onChange","map","id","userId","key","classNames","checked","readOnly","onClick","React","Component","request","url","options","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","user","data","prevProps","userClear","name","email","phone","App","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.600fcade.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedTodos: 'all',\n  }\n\n  handleQueryChange = (event) => {\n    this.setState({ query: event.target.value.toLowerCase() });\n  }\n\n  handleSelectedChange = (event) => {\n    this.setState({ selectedTodos: event.target.value });\n  }\n\n  todosSelector = (todos) => {\n    const { selectedTodos } = this.state;\n\n    switch (selectedTodos) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  };\n\n  render() {\n    const { todos, userSelect, selectedUserId } = this.props;\n    const { query } = this.state;\n\n    const workingTodos = this.todosSelector([...todos]);\n\n    // eslint-disable-next-line array-callback-return,consistent-return\n    const visibleTodos = workingTodos.filter(({ title }) => {\n      if (title) {\n        return title.toLowerCase().includes(query);\n      }\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        {'Search: '}\n        <input\n          type=\"text\"\n          placeholder=\"Enter a title\"\n          onChange={this.handleQueryChange}\n        />\n\n        <select\n          onChange={this.handleSelectedChange}\n        >\n          <option>Choose todos</option>\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(({ id, title, userId, completed }) => (\n              <li\n                key={id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': completed,\n                  'TodoList__item--unchecked': !completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={completed}\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  onClick={() => {\n                    userSelect(userId);\n                  }}\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                      selectedUserId === userId,\n                  })}\n                  type=\"button\"\n                >\n                  {`User #${+userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({}),\n  ).isRequired,\n\n  userSelect: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","// eslint-disable-next-line\nconst BASE_URL = `https://mate-api.herokuapp.com`;\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { request } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    request(`/users/${this.props.userId}`)\n      .then(({ data }) => {\n        this.setState({ user: data });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      request(`/users/${this.props.userId}`)\n        .then(({ data }) => {\n          this.setState({ user: data });\n        });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userClear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          onClick={userClear}\n          type=\"button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userClear: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    request('/todos')\n      .then((todosFromServer) => {\n        this.setState({ todos: todosFromServer.data });\n      });\n  }\n\n  userSelect = (userId) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  }\n\n  userClear = () => this.setState({ selectedUserId: 0 });\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            userSelect={this.userSelect}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                userClear={this.userClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}